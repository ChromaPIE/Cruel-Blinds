[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = 'G.FUNCS.discard_cards_from_highlighted = function(e, hook)'
position = 'after'
payload = '''if G.GAME.blind and (G.GAME.blind.name == "The Sink") and not G.GAME.blind.disabled then
        local hands = evaluate_poker_hand(G.hand.highlighted)
         if next(hands["Flush"]) then
             G.E_MANAGER:add_event(Event({trigger = 'immediate',func = function()
                 G.GAME.blind:disable()
                 return true
            end}))
         end
    end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''if G.GAME.blind.name == 'The Serpent' and'''
position = 'before'
payload = '''if G.GAME.blind and (G.GAME.blind.name == "The Jaw") and not G.GAME.blind.disabled and (G.GAME.current_round.hands_played > 0 or G.GAME.current_round.discards_used > 0) then
        if ((G.GAME.dollars - G.GAME.bankrupt_at) < hand_space) then
            hand_space = (G.GAME.dollars - G.GAME.bankrupt_at)
            if ((G.GAME.dollars - G.GAME.bankrupt_at) ~= 0) then
                ease_dollars(G.GAME.bankrupt_at-G.GAME.dollars)
                delay(0.1)
            end
        else
            if (hand_space ~= 0) then
                ease_dollars(-hand_space)
                delay(0.1)
            end
        end
        if not (G.STATE == G.STATES.TAROT_PACK or G.STATE == G.STATES.SPECTRAL_PACK) and
            (hand_space <= 0) and (#G.hand.cards == 0) then 
            G.STATE = G.STATES.GAME_OVER; G.STATE_COMPLETE = false 
            return true
        end
    end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = 'if not v.boss then'
position = 'after'
payload = '''elseif G.GAME.modifiers["cruel_blinds"] and (G.GAME.round_resets.ante >= 2) and (v.boss.hardcore ~= true) then

elseif G.GAME.modifiers["cruel_blinds_all"] and (v.boss.hardcore ~= true) then

elseif v.boss.no_penultimate and (G.GAME.round_resets.ante == G.GAME.win_ante - 1) then'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'back.lua'
pattern = '''if self.name == 'Plasma Deck' and args.context == 'final_scoring_step' then'''
position = 'before'
payload = '''if G.GAME.blind and (G.GAME.blind.name == 'Obscure Overshoot') and not (G.GAME.blind.disabled) and (args.context == 'final_scoring_step') then
    local upper = math.floor(args.chips*args.mult)
    local base = G.GAME.chips
    local overshoot = math.floor((((base + upper)/G.GAME.blind.chips) - 1) * 20)
    if ((to_big and (to_big(overshoot) > to_big(0))) or (overshoot > 0)) then
        G.E_MANAGER:add_event(Event({
            func = (function()
                G.GAME.blind.chips = G.GAME.blind.chips * (1 + (0.08 * overshoot))
                G.GAME.blind.chip_text = number_format(G.GAME.blind.chips)
                G.GAME.blind:set_text()
                G.GAME.blind:wiggle()
                delay(0.4)
                return true
            end)
        }))
    end
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/misc_functions.lua'
pattern = 'return results'
position = 'before'
payload = '''if G.GAME.blind and (G.GAME.blind.name == "The Steal") and not G.GAME.blind.disabled then
        if G.GAME.current_round.most_played_poker_hand == "High Card" then

        else
            results[G.GAME.current_round.most_played_poker_hand] = {}
        end
    end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = 'function Card:sell_card()'
position = 'after'
payload = '''if self.ability.set == 'Joker' and G.GAME.blind and G.GAME.blind.name == 'Daring Group' then
        G.GAME.blind.config.joker_sold = true
        for _, v in ipairs(G.playing_cards) do
            G.GAME.blind:debuff_card(v)
        end
    end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'blind.lua'
pattern = 'function Blind:load(blindTable)'
position = 'after'
payload = '''self.config.blinds = blindTable.blinds or {}

    self.config.joker_sold = blindTable.didSell or false
    self.config.even_parity = blindTable.parity or false'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'blind.lua'
pattern = 'return blindTable'
position = 'before'
payload = '''blindTable.blinds = self.config.blinds
    blindTable.didSell = self.config.joker_sold
    blindTable.parity = self.config.even_parity'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = 'delay = delay*1.25'
position = 'after'
payload = '''if card.ability and card.ability.confused and (not extra or not extra.bypass_confused) then
    return
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''check_and_set_high_score('hand', hand_chips*mult)'''
position = 'before'
payload = '''G.E_MANAGER:add_event(Event({
      trigger = 'after',
      delay = 0.3,
      func = (function() G.GAME.blind.show_confused = nil;return true end)
    }))'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = 'if vals.chips and G.GAME.current_round.current_hand.chips ~= vals.chips then'
position = 'after'
payload = '''if G.GAME.blind.show_confused then
    vals.chips = '?'
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = 'if vals.mult and G.GAME.current_round.current_hand.mult ~= vals.mult then'
position = 'after'
payload = '''if G.GAME.blind.show_confused then
    vals.mult = '?'
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = 'for j=1,#reps do'
position = 'after'
payload = '''if scoring_hand[i].ability.confused then
    card_eval_status_text(scoring_hand[i], 'jokers', 0, percent, nil, {colour = G.C.CHIPS, message = "Clouded!", bypass_confused = true})
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''if self.ability.name == 'The Soul' and (self.config.center.discovered or self.bypass_discovery_center) then'''
position = 'before'
payload = '''if self.ability and (self.ability.puzzled) then
    G.shared_seals['Broken'].role.draw_major = self
    G.shared_seals['Broken']:draw_shader('dissolve', nil, nil, nil, self.children.center)
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''if self.edition or self.seal or self.ability.eternal or self.ability.rental or self.ability.perishable or self.sticker or self.ability.set == 'Spectral' or self.debuff or self.greyed or self.ability.name == 'The Soul' or self.ability.set == 'Voucher' or self.ability.set == 'Booster' or self.config.center.soul_pos or self.config.center.demo then'''
position = 'at'
payload = '''if (self.ability and (self.ability.puzzled)) or self.edition or self.seal or self.ability.eternal or self.ability.rental or self.ability.perishable or self.sticker or self.ability.set == 'Spectral' or self.debuff or self.greyed or self.ability.name == 'The Soul' or self.ability.set == 'Voucher' or self.ability.set == 'Booster' or self.config.center.soul_pos or self.config.center.demo then'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'blind.lua'
pattern = '''function Blind:press_play()'''
position = 'after'
payload = '''G.E_MANAGER:add_event(Event({trigger = 'after', delay = 0.2, func = function()
    if not G.GAME.monitor_ranks_played then
        G.GAME.monitor_ranks_played = {}
    end
    for k, v in ipairs(G.play.cards) do
        G.GAME.monitor_ranks_played[v.base.value] = (G.GAME.monitor_ranks_played[v.base.value] or 0) + 1
        if v.ability.puzzled and not v.debuff and ((not (v.ability.effect == 'Stone Card' or v.config.center.no_rank)) or v.vampired) then
            local suits = {'H', 'D', 'S', 'C'}
            local ranks = {'A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K'}
            local suit = pseudorandom_element(suits, pseudoseed('puzzle'))
            local rank = pseudorandom_element(ranks, pseudoseed('puzzle'))
            G.E_MANAGER:add_event(Event({func = function() play_sound('tarot1', math.random()*0.1 + 0.55, 0.42);v:set_base(G.P_CARDS[suit.."_"..rank]);v:juice_up(); return true end }))
            delay(0.23)
        end

    end
    for k, v in ipairs(G.hand.cards) do
        if v.ability.puzzled and not v.debuff and ((not (v.ability.effect == 'Stone Card' or v.config.center.no_rank)) or v.vampired) then
            local suits = {'H', 'D', 'S', 'C'}
            local ranks = {'A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K'}
            local suit = pseudorandom_element(suits, pseudoseed('puzzle'))
            local rank = pseudorandom_element(ranks, pseudoseed('puzzle'))
            G.E_MANAGER:add_event(Event({func = function() play_sound('tarot1', math.random()*0.1 + 0.55, 0.42);v:set_base(G.P_CARDS[suit.."_"..rank]);v:juice_up(); return true end }))
            delay(0.23)
        end
    end
return true end }))
'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''if self.pinned then badges[#badges + 1] = 'pinned_left' end'''
position = 'after'
payload = '''if (self.ability and (self.ability.puzzled)) then badges[#badges + 1] = 'puzzled' end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = '''if v == 'pinned_left' then info_queue[#info_queue+1] = {key = 'pinned_left', set = 'Other'} end'''
position = 'after'
payload = '''if v == 'puzzled' then info_queue[#info_queue+1] = {key = 'puzzled', set = 'Other'} end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/UI_definitions.lua'
pattern = '''pinned_left = G.C.ORANGE,'''
position = 'after'
payload = '''puzzled = G.C.PERISHABLE,'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = '''most_played_poker_hand = 'High Card','''
position = 'after'
payload = '''least_played_rank = '2',
least_played_rank2 = '3','''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''G.GAME.current_round.most_played_poker_hand = _handname'''
position = 'after'
payload = '''if not G.GAME.monitor_ranks_played then
    G.GAME.monitor_ranks_played = {}
end
local ranks_held = {}
for i, j in pairs(G.playing_cards) do
    if (not (j.ability.effect == 'Stone Card' or j.config.center.no_rank)) or j.vampired then
        if not j.ability.puzzled and not j.debuff then
            ranks_held[j.base.value] = true
        end
    end
end
local rank_length = 0
local firstI = 0
local secondI = 0
for i, j in pairs(ranks_held) do
    if firstI == 0 then
        firstI = i
    elseif secondI == 0 then
        secondI = i
    end
    rank_length = rank_length + 1
end
if rank_length > 1 then
    local min = G.GAME.monitor_ranks_played[firstI] or 0
    local min_rank = firstI
    local min2 = G.GAME.monitor_ranks_played[secondI] or 0
    local min_rank2 = secondI
    if min2 < min then
        min, min2 = min2, min
        min_rank, min_rank2 = min_rank2, min_rank
    end
    for i, j in pairs(ranks_held) do
        if (G.GAME.monitor_ranks_played[i] or 0) < min then
            min2 = min
            min_rank2 = min_rank
            min = G.GAME.monitor_ranks_played[i] or 0
            min_rank = i
        elseif (G.GAME.monitor_ranks_played[i] or 0) < min2 then
            min2 = G.GAME.monitor_ranks_played[i] or 0
            min_rank2 = i
        end
    end
    G.GAME.current_round.least_played_rank = min_rank
    G.GAME.current_round.least_played_rank2 = min_rank2
elseif rank_length == 1 then
    local min_rank = firstI
    G.GAME.current_round.least_played_rank = min_rank
    G.GAME.current_round.least_played_rank2 = min_rank
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''G.FUNCS.draw_from_play_to_discard()'''
position = 'at'
payload = '''
if G.GAME.blind and G.GAME.blind.refunded then
    refund_played()
else
    G.FUNCS.draw_from_play_to_discard()
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''v.ability.played_this_ante = nil'''
position = 'at'
payload = '''
if (v.ability.played_this_ante ~= nil) then
    v.ability.played_this_ante = nil
    v.ability.played_last_ante = true
else
    v.ability.played_last_ante = nil
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''table.sort(scoring_hand, function (a, b) return a.T.x < b.T.x end )'''
position = 'before'
payload = '''
if G.GAME.blind and G.GAME.blind.name == "The Card" and not G.GAME.blind.disabled then
    scoring_hand = {}
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/UI_definitions.lua'
pattern = '''local loc_name = localize{type = 'name_text', key = blind_choice.config.key, set = 'Blind'}'''
position = 'before'
payload = '''
if loc_name == "Daring Group" then
    loc_target = localize { type = 'raw_descriptions', key = blind_choice.config.key, set = 'Blind', vars = { "???", "???", "???" } }
end
if loc_name == "The Mist"then
    loc_target = localize { type = 'raw_descriptions', key = blind_choice.config.key, set = 'Blind', vars = { 3*G.GAME.probabilities.normal, 4 } }
end
if loc_name == "The Puzzle" then
    loc_target = localize { type = 'raw_descriptions', key = blind_choice.config.key, set = 'Blind', vars = { G.GAME.probabilities.normal, 3 } }
end
if loc_name == "Focused Chime" then
    local display = G.GAME.current_round.least_played_rank
    if display == 'T' then
        display = '10'
    end
    if display == 'J' then
        display = 'Jack'
    end
    if display == 'Q' then
        display = 'Queen'
    end
    if display == 'K' then
        display = 'King'
    end
    if display == 'A' then
        display = 'Ace'
    end
    local display2 = G.GAME.current_round.least_played_rank2
    if display2 == 'T' then
        display2 = '10'
    end
    if display2 == 'J' then
        display2 = 'Jack'
    end
    if display2 == 'Q' then
        display2 = 'Queen'
    end
    if display2 == 'K' then
        display2 = 'King'
    end
    if display2 == 'A' then
        display2 = 'Ace'
    end
    loc_target = localize { type = 'raw_descriptions', key = blind_choice.config.key, set = 'Blind', vars = {localize(display, 'ranks'), localize(display2, 'ranks')} }
end
if loc_name == "The Register" then
    loc_target = localize { type = 'raw_descriptions', key = blind_choice.config.key, set = 'Blind', vars = { G.GAME.probabilities.normal, 2 } }
end
'''
match_indent = true